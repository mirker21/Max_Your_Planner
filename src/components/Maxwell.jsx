/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.12 maxwell_the_beaver_final.glb --transform -keepmeshes 
Files: maxwell_the_beaver_final.glb [410.16KB] > maxwell_the_beaver_final-transformed.glb [347.99KB] (15%)
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import * as THREE from 'three'

export default function Maxwell(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('./models/maxwell.gltf')
  const { actions, mixer } = useAnimations(animations, group)

  const glassMaterial = new THREE.MeshStandardMaterial({
    color: new THREE.Color(0xffffff),
    opacity: 0.3,
    transparent: true,
    roughness: 0,
  }) 

  nodes.Magnifying_Glass.children[1].material = glassMaterial;

  useEffect(() => {
    const animationNames = Object.keys(actions);

    if (props.currentAnimation === 'Greet') {
      nodes['Pencil'].visible = false;
      nodes['Paper'].visible = false;
      nodes['Magnifying_Glass'].visible = false;

      actions[props.currentAnimation].reset()
      actions[props.currentAnimation].setLoop(THREE.LoopOnce);
      actions[props.currentAnimation].play()
      mixer.addEventListener('finished', () => {
        actions[props.currentAnimation].fadeOut(0.25);
        actions['Idle'].reset().fadeIn(0.25).play();
      })
    } else if (props.currentAnimation === 'Idle') {
      nodes['Pencil'].visible = false;
      nodes['Paper'].visible = false;
      nodes['Magnifying_Glass'].visible = false;

      animationNames.map(name => {
        actions[name].fadeOut(0.15);
      })
      actions['Idle'].reset().fadeIn(0.15).play();
    } else if (props.currentAnimation === 'Reading') {
      nodes.Pencil.visible = false;
      nodes.Paper.visible = true;
      nodes.Magnifying_Glass.visible = false;

      animationNames.map(name => {
        actions[name].fadeOut(0.15);
      })
      actions[props.currentAnimation].reset().fadeIn(0.15).play()
    } else if (props.currentAnimation === 'Writing') {
      nodes.Pencil.visible = true;
      nodes.Paper.visible = true;
      nodes.Magnifying_Glass.visible = false;

      animationNames.map(name => {
        actions[name].fadeOut(0.15);
      })
      actions[props.currentAnimation].reset().fadeIn(0.15).play()
    } else if (props.currentAnimation === 'Searching') {
      nodes.Pencil.visible = false;
      nodes.Paper.visible = false;
      nodes.Magnifying_Glass.visible = true;

      animationNames.map(name => {
        actions[name].fadeOut(0.15);
      })
      actions[props.currentAnimation].reset().fadeIn(0.15).play()
    }

    return () => {
      actions[props.currentAnimation].fadeOut(0.5);
    }
  }, [props.currentAnimation]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" userData={{ name: 'Armature' }}>
          <primitive object={nodes.Base} />
          <primitive object={nodes.HeadIK} />
          <primitive object={nodes.ArmIKLeft} />
          <primitive object={nodes.ArmIKRight} />
          <primitive object={nodes.TailIK} />
          <primitive object={nodes.LegIKLeft} />
          <primitive object={nodes.LegIKRight} />
          <group name="Body" userData={{ name: 'Body' }}>
            <skinnedMesh name="Body_1" geometry={nodes.Body_1.geometry} material={materials.Tail} skeleton={nodes.Body_1.skeleton} />
            <skinnedMesh name="Body_2" geometry={nodes.Body_2.geometry} material={materials.Body} skeleton={nodes.Body_2.skeleton} />
            <skinnedMesh name="Body_3" geometry={nodes.Body_3.geometry} material={materials.Mouth} skeleton={nodes.Body_3.skeleton} />
            <skinnedMesh name="Body_4" geometry={nodes.Body_4.geometry} material={materials.Belly} skeleton={nodes.Body_4.skeleton} />
          </group>
          <skinnedMesh name="Bowtie" geometry={nodes.Bowtie.geometry} material={materials.Bowtie} skeleton={nodes.Bowtie.skeleton} userData={{ name: 'Bowtie' }} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('./models/maxwell.gltf')
